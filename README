
---

## 🧠 Grover's Algorithm SAT Solver

This project demonstrates how Grover's quantum search algorithm can be applied to solve **Boolean Satisfiability Problems (SAT)** using Qiskit.

---

### 📋 Features

* Parses CNF formulas input by the user.
* Constructs a quantum oracle that marks satisfying assignments.
* Uses Grover's algorithm with a customizable number of iterations.
* Verifies and displays satisfying results using quantum simulation.
* Visualizes output using a histogram of measured states.

---

### 🛠️ Requirements

* Python 3.7+
* Qiskit
* NumPy
* Matplotlib

---

### 🚀 Usage

Run the main script:

```bash
python main.py
```

You will be prompted to enter a Boolean formula in **Conjunctive Normal Form (CNF)**, e.g.:

```
(x0 OR ~x1) AND (~x0 OR x2)
```

**Notes:**

* Use `x0`, `x1`, etc. for variable names.
* Use `~` for negation.
* Parentheses `()` are required for each clause.
* Use `AND` to separate clauses, and `OR` to separate literals within a clause.

---

### 🧮 Example

Input:

```
(x0 OR ~x1) AND (~x0 OR x2)
```

Sample output:

```
Using 3 Grover iterations for 3 variables

Parsed formula with 3 variables and 2 clauses:
  Clause 1: (x0 OR ~x1)
  Clause 2: (~x0 OR x2)

Measurement Results:
  101: 180 shots - ✓ SAT
  110: 120 shots - ✗ UNSAT
  ...

Found 2 satisfying assignment(s)!
Most frequent satisfying assignment: 101
```

A histogram will be displayed showing the probability distribution of results.

---

### 📂 Project Structure

```
.
├── main.py           # Main Grover SAT solver script
├── README.md         # Project documentation
```

---

### 🧠 How It Works

1. **Parse Formula**: Converts user input into a structured list of clauses.
2. **Oracle Construction**: Uses ancilla qubits to mark assignments that satisfy all clauses.
3. **Grover Iterations**: Amplifies the probability of satisfying assignments.
4. **Measurement**: Outputs the most probable variable assignments.
5. **Verification**: Classifies each measured result as satisfying or not.

---

### 📈 Future Improvements

* Add GUI or web interface.
* Support for arbitrary Boolean formulas (not just CNF).
* Integration with real quantum hardware.

---

### 📜 License

This project is open-source and available under the MIT License.

---

